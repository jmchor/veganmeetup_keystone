{
  "version": 3,
  "sources": ["../keystone.ts", "../user.ts", "../post.ts", "../tag.ts", "../schema.ts", "../auth.ts"],
  "sourcesContent": ["import { config } from '@keystone-6/core';\nimport { lists } from './schema';\nimport { session, withAuth } from './auth';\n\nexport default withAuth(\n\tconfig({\n\t\tdb: {\n\t\t\tprovider: 'postgresql',\n\t\t\turl: 'postgresql://me:password@localhost:5432/veganmeetup',\n\t\t},\n\t\tlists,\n\t\tsession,\n\t})\n);\n", "import { relationship, text, timestamp, select, password } from '@keystone-6/core/fields';\nimport { list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\n\nexport const User = list({\n\taccess: allowAll,\n\n\tfields: {\n\t\tname: text({ validation: { isRequired: true } }),\n\n\t\temail: text({\n\t\t\tvalidation: { isRequired: true },\n\n\t\t\tisIndexed: 'unique',\n\t\t}),\n\n\t\tpassword: password({ validation: { isRequired: true } }),\n\n\t\tposts: relationship({ ref: 'Post.author', many: true }),\n\n\t\tcreatedAt: timestamp({\n\t\t\tdefaultValue: { kind: 'now' },\n\t\t}),\n\t},\n});\n", "import { list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\nimport { relationship, text } from '@keystone-6/core/fields';\nimport { document } from '@keystone-6/fields-document';\n\nexport const Post = list({\n\taccess: allowAll,\n\n\tfields: {\n\t\ttitle: text({ validation: { isRequired: true } }),\n\n\t\tcontent: document({\n\t\t\tformatting: true,\n\t\t\tlayouts: [\n\t\t\t\t[1, 1],\n\t\t\t\t[1, 1, 1],\n\t\t\t\t[2, 1],\n\t\t\t\t[1, 2],\n\t\t\t\t[1, 2, 1],\n\t\t\t],\n\t\t\tlinks: true,\n\t\t\tdividers: true,\n\t\t}),\n\n\t\tauthor: relationship({\n\t\t\tref: 'User.posts',\n\t\t\tui: {\n\t\t\t\tdisplayMode: 'cards',\n\t\t\t\tcardFields: ['name', 'email'],\n\t\t\t\tinlineEdit: { fields: ['name', 'email'] },\n\t\t\t\tlinkToItem: true,\n\t\t\t\tinlineConnect: true,\n\t\t\t},\n\t\t\tmany: false,\n\t\t}),\n\n\t\ttags: relationship({\n\t\t\tref: 'Tag.posts',\n\t\t\tmany: true,\n\t\t\tui: {\n\t\t\t\tdisplayMode: 'cards',\n\t\t\t\tcardFields: ['name'],\n\t\t\t\tinlineEdit: { fields: ['name'] },\n\t\t\t\tlinkToItem: true,\n\t\t\t\tinlineConnect: true,\n\t\t\t\tinlineCreate: { fields: ['name'] },\n\t\t\t},\n\t\t}),\n\t},\n});\n", "import { list } from '@keystone-6/core';\nimport { allowAll } from '@keystone-6/core/access';\nimport { relationship, text } from '@keystone-6/core/fields';\n\nexport const Tag = list({\n\taccess: allowAll,\n\tui: {\n\t\tisHidden: true,\n\t},\n\tfields: {\n\t\tname: text(),\n\n\t\tposts: relationship({ ref: 'Post.tags', many: true }),\n\t},\n});\n", "import type { Lists } from '.keystone/types';\nimport { User } from './user';\nimport { Post } from './post';\nimport { Tag } from './tag';\n\nexport const lists = {\n\tUser: User,\n\tPost: Post,\n\tTag: Tag,\n};\n", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { randomBytes } from 'crypto';\nimport { createAuth } from '@keystone-6/auth';\n\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from '@keystone-6/core/session';\n\n// for a stateless session, a SESSION_SECRET should always be provided\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\n  sessionSecret = randomBytes(32).toString('hex');\n}\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n  //   this can be helpful for when you are writing your access control functions\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  sessionData: 'name createdAt',\n  secretField: 'password',\n\n  // WARNING: remove initFirstItem functionality in production\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n  initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n    fields: ['name', 'email', 'password'],\n\n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    //   you shouldn't use this in production\n  },\n});\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n"],
  "mappings": "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",
  "names": ["import_core", "import_core", "import_access", "import_fields", "import_core", "import_access", "import_fields"]
}
